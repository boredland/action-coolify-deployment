/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  "/applications": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List
     * @description List all applications.
     */
    get: operations["list-applications"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/applications/public": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create (Public)
     * @description Create new application based on a public git repository.
     */
    post: operations["create-public-application"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/applications/private-github-app": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create (Private - GH App)
     * @description Create new application based on a private repository through a Github App.
     */
    post: operations["create-private-github-app-application"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/applications/private-deploy-key": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create (Private - Deploy Key)
     * @description Create new application based on a private repository through a Deploy Key.
     */
    post: operations["create-private-deploy-key-application"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/applications/dockerfile": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create (Dockerfile)
     * @description Create new application based on a simple Dockerfile.
     */
    post: operations["create-dockerfile-application"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/applications/dockerimage": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create (Docker Image)
     * @description Create new application based on a prebuilt docker image
     */
    post: operations["create-dockerimage-application"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/applications/dockercompose": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create (Docker Compose)
     * @description Create new application based on a docker-compose file.
     */
    post: operations["create-dockercompose-application"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/applications/{uuid}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get
     * @description Get application by UUID.
     */
    get: operations["get-application-by-uuid"];
    put?: never;
    post?: never;
    /**
     * Delete
     * @description Delete application by UUID.
     */
    delete: operations["delete-application-by-uuid"];
    options?: never;
    head?: never;
    /**
     * Update
     * @description Update application by UUID.
     */
    patch: operations["update-application-by-uuid"];
    trace?: never;
  };
  "/applications/{uuid}/envs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Envs
     * @description List all envs by application UUID.
     */
    get: operations["list-envs-by-application-uuid"];
    put?: never;
    /**
     * Create Env
     * @description Create env by application UUID.
     */
    post: operations["create-env-by-application-uuid"];
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update Env
     * @description Update env by application UUID.
     */
    patch: operations["update-env-by-application-uuid"];
    trace?: never;
  };
  "/applications/{uuid}/envs/bulk": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update Envs (Bulk)
     * @description Update multiple envs by application UUID.
     */
    patch: operations["update-envs-by-application-uuid"];
    trace?: never;
  };
  "/applications/{uuid}/envs/{env_uuid}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete Env
     * @description Delete env by UUID.
     */
    delete: operations["delete-env-by-application-uuid"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/applications/{uuid}/start": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Start
     * @description Start application. `Post` request is also accepted.
     */
    get: operations["start-application-by-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/applications/{uuid}/stop": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Stop
     * @description Stop application. `Post` request is also accepted.
     */
    get: operations["stop-application-by-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/applications/{uuid}/restart": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Restart
     * @description Restart application. `Post` request is also accepted.
     */
    get: operations["restart-application-by-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/applications/{uuid}/execute": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Execute Command
     * @description Execute a command on the application's current container.
     */
    post: operations["execute-command-application"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/databases": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List
     * @description List all databases.
     */
    get: operations["list-databases"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/databases/{uuid}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get
     * @description Get database by UUID.
     */
    get: operations["get-database-by-uuid"];
    put?: never;
    post?: never;
    /**
     * Delete
     * @description Delete database by UUID.
     */
    delete: operations["delete-database-by-uuid"];
    options?: never;
    head?: never;
    /**
     * Update
     * @description Update database by UUID.
     */
    patch: operations["update-database-by-uuid"];
    trace?: never;
  };
  "/databases/postgresql": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create (PostgreSQL)
     * @description Create a new PostgreSQL database.
     */
    post: operations["create-database-postgresql"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/databases/clickhouse": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create (Clickhouse)
     * @description Create a new Clickhouse database.
     */
    post: operations["create-database-clickhouse"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/databases/dragonfly": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create (DragonFly)
     * @description Create a new DragonFly database.
     */
    post: operations["create-database-dragonfly"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/databases/redis": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create (Redis)
     * @description Create a new Redis database.
     */
    post: operations["create-database-redis"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/databases/keydb": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create (KeyDB)
     * @description Create a new KeyDB database.
     */
    post: operations["create-database-keydb"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/databases/mariadb": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create (MariaDB)
     * @description Create a new MariaDB database.
     */
    post: operations["create-database-mariadb"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/databases/mysql": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create (MySQL)
     * @description Create a new MySQL database.
     */
    post: operations["create-database-mysql"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/databases/mongodb": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    /**
     * Create (MongoDB)
     * @description Create a new MongoDB database.
     */
    post: operations["create-database-mongodb"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/databases/{uuid}/start": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Start
     * @description Start database. `Post` request is also accepted.
     */
    get: operations["start-database-by-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/databases/{uuid}/stop": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Stop
     * @description Stop database. `Post` request is also accepted.
     */
    get: operations["stop-database-by-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/databases/{uuid}/restart": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Restart
     * @description Restart database. `Post` request is also accepted.
     */
    get: operations["restart-database-by-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/deployments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List
     * @description List currently running deployments
     */
    get: operations["list-deployments"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/deployments/{uuid}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get
     * @description Get deployment by UUID.
     */
    get: operations["get-deployment-by-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/deploy": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Deploy
     * @description Deploy by tag or uuid. `Post` request also accepted.
     */
    get: operations["deploy-by-tag-or-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/version": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Version
     * @description Get Coolify version.
     */
    get: operations["version"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/enable": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Enable API
     * @description Enable API (only with root permissions).
     */
    get: operations["enable-api"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/disable": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Disable API
     * @description Disable API (only with root permissions).
     */
    get: operations["disable-api"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/health": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Healthcheck
     * @description Healthcheck endpoint.
     */
    get: operations["healthcheck"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/projects": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List
     * @description List projects.
     */
    get: operations["list-projects"];
    put?: never;
    /**
     * Create
     * @description Create Project.
     */
    post: operations["create-project"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/projects/{uuid}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get
     * @description Get project by UUID.
     */
    get: operations["get-project-by-uuid"];
    put?: never;
    post?: never;
    /**
     * Delete
     * @description Delete project by UUID.
     */
    delete: operations["delete-project-by-uuid"];
    options?: never;
    head?: never;
    /**
     * Update
     * @description Update Project.
     */
    patch: operations["update-project-by-uuid"];
    trace?: never;
  };
  "/projects/{uuid}/{environment_name_or_uuid}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Environment
     * @description Get environment by name or UUID.
     */
    get: operations["get-environment-by-name-or-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/resources": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List
     * @description Get all resources.
     */
    get: operations["list-resources"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/security/keys": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List
     * @description List all private keys.
     */
    get: operations["list-private-keys"];
    put?: never;
    /**
     * Create
     * @description Create a new private key.
     */
    post: operations["create-private-key"];
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update
     * @description Update a private key.
     */
    patch: operations["update-private-key"];
    trace?: never;
  };
  "/security/keys/{uuid}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get
     * @description Get key by UUID.
     */
    get: operations["get-private-key-by-uuid"];
    put?: never;
    post?: never;
    /**
     * Delete
     * @description Delete a private key.
     */
    delete: operations["delete-private-key-by-uuid"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/servers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List
     * @description List all servers.
     */
    get: operations["list-servers"];
    put?: never;
    /**
     * Create
     * @description Create Server.
     */
    post: operations["create-server"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/servers/{uuid}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get
     * @description Get server by UUID.
     */
    get: operations["get-server-by-uuid"];
    put?: never;
    post?: never;
    /**
     * Delete
     * @description Delete server by UUID.
     */
    delete: operations["delete-server-by-uuid"];
    options?: never;
    head?: never;
    /**
     * Update
     * @description Update Server.
     */
    patch: operations["update-server-by-uuid"];
    trace?: never;
  };
  "/servers/{uuid}/resources": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Resources
     * @description Get resources by server.
     */
    get: operations["get-resources-by-server-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/servers/{uuid}/domains": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Domains
     * @description Get domains by server.
     */
    get: operations["get-domains-by-server-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/servers/{uuid}/validate": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Validate
     * @description Validate server by UUID.
     */
    get: operations["validate-server-by-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/services": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List
     * @description List all services.
     */
    get: operations["list-services"];
    put?: never;
    /**
     * Create
     * @description Create a one-click service
     */
    post: operations["create-service"];
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/services/{uuid}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get
     * @description Get service by UUID.
     */
    get: operations["get-service-by-uuid"];
    put?: never;
    post?: never;
    /**
     * Delete
     * @description Delete service by UUID.
     */
    delete: operations["delete-service-by-uuid"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/services/{uuid}/envs": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List Envs
     * @description List all envs by service UUID.
     */
    get: operations["list-envs-by-service-uuid"];
    put?: never;
    /**
     * Create Env
     * @description Create env by service UUID.
     */
    post: operations["create-env-by-service-uuid"];
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update Env
     * @description Update env by service UUID.
     */
    patch: operations["update-env-by-service-uuid"];
    trace?: never;
  };
  "/services/{uuid}/envs/bulk": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    /**
     * Update Envs (Bulk)
     * @description Update multiple envs by service UUID.
     */
    patch: operations["update-envs-by-service-uuid"];
    trace?: never;
  };
  "/services/{uuid}/envs/{env_uuid}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    get?: never;
    put?: never;
    post?: never;
    /**
     * Delete Env
     * @description Delete env by UUID.
     */
    delete: operations["delete-env-by-service-uuid"];
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/services/{uuid}/start": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Start
     * @description Start service. `Post` request is also accepted.
     */
    get: operations["start-service-by-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/services/{uuid}/stop": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Stop
     * @description Stop service. `Post` request is also accepted.
     */
    get: operations["stop-service-by-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/services/{uuid}/restart": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Restart
     * @description Restart service. `Post` request is also accepted.
     */
    get: operations["restart-service-by-uuid"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * List
     * @description Get all teams.
     */
    get: operations["list-teams"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{id}": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Get
     * @description Get team by TeamId.
     */
    get: operations["get-team-by-id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/{id}/members": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Members
     * @description Get members by TeamId.
     */
    get: operations["get-members-by-team-id"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/current": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Authenticated Team
     * @description Get currently authenticated team.
     */
    get: operations["get-current-team"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
  "/teams/current/members": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /**
     * Authenticated Team Members
     * @description Get currently authenticated team members.
     */
    get: operations["get-current-team-members"];
    put?: never;
    post?: never;
    delete?: never;
    options?: never;
    head?: never;
    patch?: never;
    trace?: never;
  };
}
export type webhooks = Record<string, never>;
export interface components {
  schemas: {
    /** @description Application model */
    Application: {
      /** @description The application identifier in the database. */
      id?: number;
      /** @description The application description. */
      description?: string | null;
      /** @description The repository project identifier. */
      repository_project_id?: number | null;
      /** @description The application UUID. */
      uuid?: string;
      /** @description The application name. */
      name?: string;
      /** @description The application domains. */
      fqdn?: string | null;
      /** @description Configuration hash. */
      config_hash?: string;
      /** @description Git repository URL. */
      git_repository?: string;
      /** @description Git branch. */
      git_branch?: string;
      /** @description Git commit SHA. */
      git_commit_sha?: string;
      /** @description Git full URL. */
      git_full_url?: string | null;
      /** @description Docker registry image name. */
      docker_registry_image_name?: string | null;
      /** @description Docker registry image tag. */
      docker_registry_image_tag?: string | null;
      /**
       * @description Build pack.
       * @enum {string}
       */
      build_pack?: "nixpacks" | "static" | "dockerfile" | "dockercompose";
      /** @description Static image used when static site is deployed. */
      static_image?: string;
      /** @description Install command. */
      install_command?: string;
      /** @description Build command. */
      build_command?: string;
      /** @description Start command. */
      start_command?: string;
      /** @description Ports exposes. */
      ports_exposes?: string;
      /** @description Ports mappings. */
      ports_mappings?: string | null;
      /** @description Base directory for all commands. */
      base_directory?: string;
      /** @description Publish directory. */
      publish_directory?: string;
      /** @description Health check enabled. */
      health_check_enabled?: boolean;
      /** @description Health check path. */
      health_check_path?: string;
      /** @description Health check port. */
      health_check_port?: string | null;
      /** @description Health check host. */
      health_check_host?: string | null;
      /** @description Health check method. */
      health_check_method?: string;
      /** @description Health check return code. */
      health_check_return_code?: number;
      /** @description Health check scheme. */
      health_check_scheme?: string;
      /** @description Health check response text. */
      health_check_response_text?: string | null;
      /** @description Health check interval in seconds. */
      health_check_interval?: number;
      /** @description Health check timeout in seconds. */
      health_check_timeout?: number;
      /** @description Health check retries count. */
      health_check_retries?: number;
      /** @description Health check start period in seconds. */
      health_check_start_period?: number;
      /** @description Memory limit. */
      limits_memory?: string;
      /** @description Memory swap limit. */
      limits_memory_swap?: string;
      /** @description Memory swappiness. */
      limits_memory_swappiness?: number;
      /** @description Memory reservation. */
      limits_memory_reservation?: string;
      /** @description CPU limit. */
      limits_cpus?: string;
      /** @description CPU set. */
      limits_cpuset?: string | null;
      /** @description CPU shares. */
      limits_cpu_shares?: number;
      /** @description Application status. */
      status?: string;
      /** @description Preview URL template. */
      preview_url_template?: string;
      /** @description Destination type. */
      destination_type?: string;
      /** @description Destination identifier. */
      destination_id?: number;
      /** @description Source identifier. */
      source_id?: number | null;
      /** @description Private key identifier. */
      private_key_id?: number | null;
      /** @description Environment identifier. */
      environment_id?: number;
      /** @description Dockerfile content. Used for dockerfile build pack. */
      dockerfile?: string | null;
      /** @description Dockerfile location. */
      dockerfile_location?: string;
      /** @description Custom labels. */
      custom_labels?: string | null;
      /** @description Dockerfile target build. */
      dockerfile_target_build?: string | null;
      /** @description Manual webhook secret for GitHub. */
      manual_webhook_secret_github?: string | null;
      /** @description Manual webhook secret for GitLab. */
      manual_webhook_secret_gitlab?: string | null;
      /** @description Manual webhook secret for Bitbucket. */
      manual_webhook_secret_bitbucket?: string | null;
      /** @description Manual webhook secret for Gitea. */
      manual_webhook_secret_gitea?: string | null;
      /** @description Docker compose location. */
      docker_compose_location?: string;
      /** @description Docker compose content. Used for docker compose build pack. */
      docker_compose?: string | null;
      /** @description Docker compose raw content. */
      docker_compose_raw?: string | null;
      /** @description Docker compose domains. */
      docker_compose_domains?: string | null;
      /** @description Docker compose custom start command. */
      docker_compose_custom_start_command?: string | null;
      /** @description Docker compose custom build command. */
      docker_compose_custom_build_command?: string | null;
      /** @description Swarm replicas. Only used for swarm deployments. */
      swarm_replicas?: number | null;
      /** @description Swarm placement constraints. Only used for swarm deployments. */
      swarm_placement_constraints?: string | null;
      /** @description Custom docker run options. */
      custom_docker_run_options?: string | null;
      /** @description Post deployment command. */
      post_deployment_command?: string | null;
      /** @description Post deployment command container. */
      post_deployment_command_container?: string | null;
      /** @description Pre deployment command. */
      pre_deployment_command?: string | null;
      /** @description Pre deployment command container. */
      pre_deployment_command_container?: string | null;
      /** @description Watch paths. */
      watch_paths?: string | null;
      /** @description Custom healthcheck found. */
      custom_healthcheck_found?: boolean;
      /**
       * @description How to set redirect with Traefik / Caddy. www<->non-www.
       * @enum {string|null}
       */
      redirect?: "www" | "non-www" | "both" | null;
      /**
       * Format: date-time
       * @description The date and time when the application was created.
       */
      created_at?: string;
      /**
       * Format: date-time
       * @description The date and time when the application was last updated.
       */
      updated_at?: string;
      /**
       * Format: date-time
       * @description The date and time when the application was deleted.
       */
      deleted_at?: string | null;
      /** @description How Coolify parse the compose file. */
      compose_parsing_version?: string;
      /** @description Custom Nginx configuration base64 encoded. */
      custom_nginx_configuration?: string | null;
    };
    /** @description Project model */
    ApplicationDeploymentQueue: {
      id?: number;
      application_id?: string;
      deployment_uuid?: string;
      pull_request_id?: number;
      force_rebuild?: boolean;
      commit?: string;
      status?: string;
      is_webhook?: boolean;
      is_api?: boolean;
      created_at?: string;
      updated_at?: string;
      logs?: string;
      current_process_id?: string;
      restart_only?: boolean;
      git_type?: string;
      server_id?: number;
      application_name?: string;
      server_name?: string;
      deployment_url?: string;
      destination_id?: string;
      only_this_server?: boolean;
      rollback?: boolean;
      commit_message?: string;
    };
    /** @description Environment model */
    Environment: {
      id?: number;
      name?: string;
      project_id?: number;
      created_at?: string;
      updated_at?: string;
      description?: string;
    };
    /** @description Environment Variable model */
    EnvironmentVariable: {
      id?: number;
      uuid?: string;
      resourceable_type?: string;
      resourceable_id?: number;
      is_build_time?: boolean;
      is_literal?: boolean;
      is_multiline?: boolean;
      is_preview?: boolean;
      is_shared?: boolean;
      is_shown_once?: boolean;
      key?: string;
      value?: string;
      real_value?: string;
      version?: string;
      created_at?: string;
      updated_at?: string;
    };
    /** @description Private Key model */
    PrivateKey: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      /** Format: private-key */
      private_key?: string;
      is_git_related?: boolean;
      team_id?: number;
      created_at?: string;
      updated_at?: string;
    };
    /** @description Project model */
    Project: {
      id?: number;
      uuid?: string;
      name?: string;
      description?: string;
      /** @description The environments of the project. */
      environments?: components["schemas"]["Environment"][];
    };
    /** @description Server model */
    Server: {
      /** @description The server ID. */
      id?: number;
      /** @description The server UUID. */
      uuid?: string;
      /** @description The server name. */
      name?: string;
      /** @description The server description. */
      description?: string;
      /** @description The IP address. */
      ip?: string;
      /** @description The user. */
      user?: string;
      /** @description The port number. */
      port?: number;
      /** @description The proxy configuration. */
      proxy?: Record<string, never>;
      /**
       * @description The proxy type.
       * @enum {string}
       */
      proxy_type?: "traefik" | "caddy" | "none";
      /** @description The flag to indicate if the high disk usage notification has been sent. */
      high_disk_usage_notification_sent?: boolean;
      /** @description The flag to indicate if the unreachable notification has been sent. */
      unreachable_notification_sent?: boolean;
      /** @description The unreachable count for your server. */
      unreachable_count?: number;
      /** @description The validation logs. */
      validation_logs?: string;
      /** @description The flag to indicate if the log drain notification has been sent. */
      log_drain_notification_sent?: boolean;
      /** @description The swarm cluster configuration. */
      swarm_cluster?: string;
      settings?: components["schemas"]["ServerSetting"];
    };
    /** @description Server Settings model */
    ServerSetting: {
      id?: number;
      concurrent_builds?: number;
      dynamic_timeout?: number;
      force_disabled?: boolean;
      force_server_cleanup?: boolean;
      is_build_server?: boolean;
      is_cloudflare_tunnel?: boolean;
      is_jump_server?: boolean;
      is_logdrain_axiom_enabled?: boolean;
      is_logdrain_custom_enabled?: boolean;
      is_logdrain_highlight_enabled?: boolean;
      is_logdrain_newrelic_enabled?: boolean;
      is_metrics_enabled?: boolean;
      is_reachable?: boolean;
      is_sentinel_enabled?: boolean;
      is_swarm_manager?: boolean;
      is_swarm_worker?: boolean;
      is_usable?: boolean;
      logdrain_axiom_api_key?: string;
      logdrain_axiom_dataset_name?: string;
      logdrain_custom_config?: string;
      logdrain_custom_config_parser?: string;
      logdrain_highlight_project_id?: string;
      logdrain_newrelic_base_uri?: string;
      logdrain_newrelic_license_key?: string;
      sentinel_metrics_history_days?: number;
      sentinel_metrics_refresh_rate_seconds?: number;
      sentinel_token?: string;
      docker_cleanup_frequency?: string;
      docker_cleanup_threshold?: number;
      server_id?: number;
      wildcard_domain?: string;
      created_at?: string;
      updated_at?: string;
      /** @description The flag to indicate if the unused volumes should be deleted. */
      delete_unused_volumes?: boolean;
      /** @description The flag to indicate if the unused networks should be deleted. */
      delete_unused_networks?: boolean;
    };
    /** @description Service model */
    Service: {
      /** @description The unique identifier of the service. Only used for database identification. */
      id?: number;
      /** @description The unique identifier of the service. */
      uuid?: string;
      /** @description The name of the service. */
      name?: string;
      /** @description The unique identifier of the environment where the service is attached to. */
      environment_id?: number;
      /** @description The unique identifier of the server where the service is running. */
      server_id?: number;
      /** @description The description of the service. */
      description?: string;
      /** @description The raw docker-compose.yml file of the service. */
      docker_compose_raw?: string;
      /** @description The docker-compose.yml file that is parsed and modified by Coolify. */
      docker_compose?: string;
      /** @description Destination type. */
      destination_type?: string;
      /** @description The unique identifier of the destination where the service is running. */
      destination_id?: number;
      /** @description The flag to connect the service to the predefined Docker network. */
      connect_to_docker_network?: boolean;
      /** @description The flag to enable the container label escape. */
      is_container_label_escape_enabled?: boolean;
      /** @description The flag to enable the container label readonly. */
      is_container_label_readonly_enabled?: boolean;
      /** @description The hash of the service configuration. */
      config_hash?: string;
      /** @description The type of the service. */
      service_type?: string;
      /** @description The date and time when the service was created. */
      created_at?: string;
      /** @description The date and time when the service was last updated. */
      updated_at?: string;
      /** @description The date and time when the service was deleted. */
      deleted_at?: string;
    };
    /** @description Team model */
    Team: {
      /** @description The unique identifier of the team. */
      id?: number;
      /** @description The name of the team. */
      name?: string;
      /** @description The description of the team. */
      description?: string;
      /** @description Whether the team is personal or not. */
      personal_team?: boolean;
      /** @description The date and time the team was created. */
      created_at?: string;
      /** @description The date and time the team was last updated. */
      updated_at?: string;
      /** @description Whether to show the boarding screen or not. */
      show_boarding?: boolean;
      /** @description The custom server limit. */
      custom_server_limit?: string;
      /** @description The members of the team. */
      members?: components["schemas"]["User"][];
    };
    /** @description User model */
    User: {
      /** @description The user identifier in the database. */
      id?: number;
      /** @description The user name. */
      name?: string;
      /** @description The user email. */
      email?: string;
      /** @description The date when the user email was verified. */
      email_verified_at?: string;
      /** @description The date when the user was created. */
      created_at?: string;
      /** @description The date when the user was updated. */
      updated_at?: string;
      /** @description The date when the user two factor was confirmed. */
      two_factor_confirmed_at?: string;
      /** @description The flag to force the user to reset the password. */
      force_password_reset?: boolean;
      /** @description The flag to receive marketing emails. */
      marketing_emails?: boolean;
    };
  };
  responses: {
    /** @description Invalid token. */
    400: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /** @example Invalid token. */
          message?: string;
        };
      };
    };
    /** @description Unauthenticated. */
    401: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /** @example Unauthenticated. */
          message?: string;
        };
      };
    };
    /** @description Resource not found. */
    404: {
      headers: {
        [name: string]: unknown;
      };
      content: {
        "application/json": {
          /** @example Resource not found. */
          message?: string;
        };
      };
    };
  };
  parameters: never;
  requestBodies: never;
  headers: never;
  pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
  "list-applications": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get all applications. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Application"][];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-public-application": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Application object that needs to be created. */
    requestBody: {
      content: {
        "application/json": {
          /** @description The project UUID. */
          project_uuid: string;
          /** @description The server UUID. */
          server_uuid: string;
          /** @description The environment name. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description The environment UUID. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description The git repository URL. */
          git_repository: string;
          /** @description The git branch. */
          git_branch: string;
          /**
           * @description The build pack type.
           * @enum {string}
           */
          build_pack: "nixpacks" | "static" | "dockerfile" | "dockercompose";
          /** @description The ports to expose. */
          ports_exposes: string;
          /** @description The destination UUID. */
          destination_uuid?: string;
          /** @description The application name. */
          name?: string;
          /** @description The application description. */
          description?: string;
          /** @description The application domains. */
          domains?: string;
          /** @description The git commit SHA. */
          git_commit_sha?: string;
          /** @description The docker registry image name. */
          docker_registry_image_name?: string;
          /** @description The docker registry image tag. */
          docker_registry_image_tag?: string;
          /** @description The flag to indicate if the application is static. */
          is_static?: boolean;
          /**
           * @description The static image.
           * @enum {string}
           */
          static_image?: "nginx:alpine";
          /** @description The install command. */
          install_command?: string;
          /** @description The build command. */
          build_command?: string;
          /** @description The start command. */
          start_command?: string;
          /** @description The ports mappings. */
          ports_mappings?: string;
          /** @description The base directory for all commands. */
          base_directory?: string;
          /** @description The publish directory. */
          publish_directory?: string;
          /** @description Health check enabled. */
          health_check_enabled?: boolean;
          /** @description Health check path. */
          health_check_path?: string;
          /** @description Health check port. */
          health_check_port?: string | null;
          /** @description Health check host. */
          health_check_host?: string | null;
          /** @description Health check method. */
          health_check_method?: string;
          /** @description Health check return code. */
          health_check_return_code?: number;
          /** @description Health check scheme. */
          health_check_scheme?: string;
          /** @description Health check response text. */
          health_check_response_text?: string | null;
          /** @description Health check interval in seconds. */
          health_check_interval?: number;
          /** @description Health check timeout in seconds. */
          health_check_timeout?: number;
          /** @description Health check retries count. */
          health_check_retries?: number;
          /** @description Health check start period in seconds. */
          health_check_start_period?: number;
          /** @description Memory limit. */
          limits_memory?: string;
          /** @description Memory swap limit. */
          limits_memory_swap?: string;
          /** @description Memory swappiness. */
          limits_memory_swappiness?: number;
          /** @description Memory reservation. */
          limits_memory_reservation?: string;
          /** @description CPU limit. */
          limits_cpus?: string;
          /** @description CPU set. */
          limits_cpuset?: string | null;
          /** @description CPU shares. */
          limits_cpu_shares?: number;
          /** @description Custom labels. */
          custom_labels?: string;
          /** @description Custom docker run options. */
          custom_docker_run_options?: string;
          /** @description Post deployment command. */
          post_deployment_command?: string;
          /** @description Post deployment command container. */
          post_deployment_command_container?: string;
          /** @description Pre deployment command. */
          pre_deployment_command?: string;
          /** @description Pre deployment command container. */
          pre_deployment_command_container?: string;
          /** @description Manual webhook secret for Github. */
          manual_webhook_secret_github?: string;
          /** @description Manual webhook secret for Gitlab. */
          manual_webhook_secret_gitlab?: string;
          /** @description Manual webhook secret for Bitbucket. */
          manual_webhook_secret_bitbucket?: string;
          /** @description Manual webhook secret for Gitea. */
          manual_webhook_secret_gitea?: string;
          /**
           * @description How to set redirect with Traefik / Caddy. www<->non-www.
           * @enum {string|null}
           */
          redirect?: "www" | "non-www" | "both" | null;
          /** @description The flag to indicate if the application should be deployed instantly. */
          instant_deploy?: boolean;
          /** @description The Dockerfile content. */
          dockerfile?: string;
          /** @description The Docker Compose location. */
          docker_compose_location?: string;
          /** @description The Docker Compose raw content. */
          docker_compose_raw?: string;
          /** @description The Docker Compose custom start command. */
          docker_compose_custom_start_command?: string;
          /** @description The Docker Compose custom build command. */
          docker_compose_custom_build_command?: string;
          /** @description The Docker Compose domains. */
          docker_compose_domains?: unknown[];
          /** @description The watch paths. */
          watch_paths?: string;
          /** @description Use build server. */
          use_build_server?: boolean | null;
        };
      };
    };
    responses: {
      /** @description Application created successfully. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-private-github-app-application": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Application object that needs to be created. */
    requestBody: {
      content: {
        "application/json": {
          /** @description The project UUID. */
          project_uuid: string;
          /** @description The server UUID. */
          server_uuid: string;
          /** @description The environment name. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description The environment UUID. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description The Github App UUID. */
          github_app_uuid: string;
          /** @description The git repository URL. */
          git_repository: string;
          /** @description The git branch. */
          git_branch: string;
          /** @description The ports to expose. */
          ports_exposes: string;
          /** @description The destination UUID. */
          destination_uuid?: string;
          /**
           * @description The build pack type.
           * @enum {string}
           */
          build_pack: "nixpacks" | "static" | "dockerfile" | "dockercompose";
          /** @description The application name. */
          name?: string;
          /** @description The application description. */
          description?: string;
          /** @description The application domains. */
          domains?: string;
          /** @description The git commit SHA. */
          git_commit_sha?: string;
          /** @description The docker registry image name. */
          docker_registry_image_name?: string;
          /** @description The docker registry image tag. */
          docker_registry_image_tag?: string;
          /** @description The flag to indicate if the application is static. */
          is_static?: boolean;
          /**
           * @description The static image.
           * @enum {string}
           */
          static_image?: "nginx:alpine";
          /** @description The install command. */
          install_command?: string;
          /** @description The build command. */
          build_command?: string;
          /** @description The start command. */
          start_command?: string;
          /** @description The ports mappings. */
          ports_mappings?: string;
          /** @description The base directory for all commands. */
          base_directory?: string;
          /** @description The publish directory. */
          publish_directory?: string;
          /** @description Health check enabled. */
          health_check_enabled?: boolean;
          /** @description Health check path. */
          health_check_path?: string;
          /** @description Health check port. */
          health_check_port?: string | null;
          /** @description Health check host. */
          health_check_host?: string | null;
          /** @description Health check method. */
          health_check_method?: string;
          /** @description Health check return code. */
          health_check_return_code?: number;
          /** @description Health check scheme. */
          health_check_scheme?: string;
          /** @description Health check response text. */
          health_check_response_text?: string | null;
          /** @description Health check interval in seconds. */
          health_check_interval?: number;
          /** @description Health check timeout in seconds. */
          health_check_timeout?: number;
          /** @description Health check retries count. */
          health_check_retries?: number;
          /** @description Health check start period in seconds. */
          health_check_start_period?: number;
          /** @description Memory limit. */
          limits_memory?: string;
          /** @description Memory swap limit. */
          limits_memory_swap?: string;
          /** @description Memory swappiness. */
          limits_memory_swappiness?: number;
          /** @description Memory reservation. */
          limits_memory_reservation?: string;
          /** @description CPU limit. */
          limits_cpus?: string;
          /** @description CPU set. */
          limits_cpuset?: string | null;
          /** @description CPU shares. */
          limits_cpu_shares?: number;
          /** @description Custom labels. */
          custom_labels?: string;
          /** @description Custom docker run options. */
          custom_docker_run_options?: string;
          /** @description Post deployment command. */
          post_deployment_command?: string;
          /** @description Post deployment command container. */
          post_deployment_command_container?: string;
          /** @description Pre deployment command. */
          pre_deployment_command?: string;
          /** @description Pre deployment command container. */
          pre_deployment_command_container?: string;
          /** @description Manual webhook secret for Github. */
          manual_webhook_secret_github?: string;
          /** @description Manual webhook secret for Gitlab. */
          manual_webhook_secret_gitlab?: string;
          /** @description Manual webhook secret for Bitbucket. */
          manual_webhook_secret_bitbucket?: string;
          /** @description Manual webhook secret for Gitea. */
          manual_webhook_secret_gitea?: string;
          /**
           * @description How to set redirect with Traefik / Caddy. www<->non-www.
           * @enum {string|null}
           */
          redirect?: "www" | "non-www" | "both" | null;
          /** @description The flag to indicate if the application should be deployed instantly. */
          instant_deploy?: boolean;
          /** @description The Dockerfile content. */
          dockerfile?: string;
          /** @description The Docker Compose location. */
          docker_compose_location?: string;
          /** @description The Docker Compose raw content. */
          docker_compose_raw?: string;
          /** @description The Docker Compose custom start command. */
          docker_compose_custom_start_command?: string;
          /** @description The Docker Compose custom build command. */
          docker_compose_custom_build_command?: string;
          /** @description The Docker Compose domains. */
          docker_compose_domains?: unknown[];
          /** @description The watch paths. */
          watch_paths?: string;
          /** @description Use build server. */
          use_build_server?: boolean | null;
        };
      };
    };
    responses: {
      /** @description Application created successfully. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-private-deploy-key-application": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Application object that needs to be created. */
    requestBody: {
      content: {
        "application/json": {
          /** @description The project UUID. */
          project_uuid: string;
          /** @description The server UUID. */
          server_uuid: string;
          /** @description The environment name. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description The environment UUID. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description The private key UUID. */
          private_key_uuid: string;
          /** @description The git repository URL. */
          git_repository: string;
          /** @description The git branch. */
          git_branch: string;
          /** @description The ports to expose. */
          ports_exposes: string;
          /** @description The destination UUID. */
          destination_uuid?: string;
          /**
           * @description The build pack type.
           * @enum {string}
           */
          build_pack: "nixpacks" | "static" | "dockerfile" | "dockercompose";
          /** @description The application name. */
          name?: string;
          /** @description The application description. */
          description?: string;
          /** @description The application domains. */
          domains?: string;
          /** @description The git commit SHA. */
          git_commit_sha?: string;
          /** @description The docker registry image name. */
          docker_registry_image_name?: string;
          /** @description The docker registry image tag. */
          docker_registry_image_tag?: string;
          /** @description The flag to indicate if the application is static. */
          is_static?: boolean;
          /**
           * @description The static image.
           * @enum {string}
           */
          static_image?: "nginx:alpine";
          /** @description The install command. */
          install_command?: string;
          /** @description The build command. */
          build_command?: string;
          /** @description The start command. */
          start_command?: string;
          /** @description The ports mappings. */
          ports_mappings?: string;
          /** @description The base directory for all commands. */
          base_directory?: string;
          /** @description The publish directory. */
          publish_directory?: string;
          /** @description Health check enabled. */
          health_check_enabled?: boolean;
          /** @description Health check path. */
          health_check_path?: string;
          /** @description Health check port. */
          health_check_port?: string | null;
          /** @description Health check host. */
          health_check_host?: string | null;
          /** @description Health check method. */
          health_check_method?: string;
          /** @description Health check return code. */
          health_check_return_code?: number;
          /** @description Health check scheme. */
          health_check_scheme?: string;
          /** @description Health check response text. */
          health_check_response_text?: string | null;
          /** @description Health check interval in seconds. */
          health_check_interval?: number;
          /** @description Health check timeout in seconds. */
          health_check_timeout?: number;
          /** @description Health check retries count. */
          health_check_retries?: number;
          /** @description Health check start period in seconds. */
          health_check_start_period?: number;
          /** @description Memory limit. */
          limits_memory?: string;
          /** @description Memory swap limit. */
          limits_memory_swap?: string;
          /** @description Memory swappiness. */
          limits_memory_swappiness?: number;
          /** @description Memory reservation. */
          limits_memory_reservation?: string;
          /** @description CPU limit. */
          limits_cpus?: string;
          /** @description CPU set. */
          limits_cpuset?: string | null;
          /** @description CPU shares. */
          limits_cpu_shares?: number;
          /** @description Custom labels. */
          custom_labels?: string;
          /** @description Custom docker run options. */
          custom_docker_run_options?: string;
          /** @description Post deployment command. */
          post_deployment_command?: string;
          /** @description Post deployment command container. */
          post_deployment_command_container?: string;
          /** @description Pre deployment command. */
          pre_deployment_command?: string;
          /** @description Pre deployment command container. */
          pre_deployment_command_container?: string;
          /** @description Manual webhook secret for Github. */
          manual_webhook_secret_github?: string;
          /** @description Manual webhook secret for Gitlab. */
          manual_webhook_secret_gitlab?: string;
          /** @description Manual webhook secret for Bitbucket. */
          manual_webhook_secret_bitbucket?: string;
          /** @description Manual webhook secret for Gitea. */
          manual_webhook_secret_gitea?: string;
          /**
           * @description How to set redirect with Traefik / Caddy. www<->non-www.
           * @enum {string|null}
           */
          redirect?: "www" | "non-www" | "both" | null;
          /** @description The flag to indicate if the application should be deployed instantly. */
          instant_deploy?: boolean;
          /** @description The Dockerfile content. */
          dockerfile?: string;
          /** @description The Docker Compose location. */
          docker_compose_location?: string;
          /** @description The Docker Compose raw content. */
          docker_compose_raw?: string;
          /** @description The Docker Compose custom start command. */
          docker_compose_custom_start_command?: string;
          /** @description The Docker Compose custom build command. */
          docker_compose_custom_build_command?: string;
          /** @description The Docker Compose domains. */
          docker_compose_domains?: unknown[];
          /** @description The watch paths. */
          watch_paths?: string;
          /** @description Use build server. */
          use_build_server?: boolean | null;
        };
      };
    };
    responses: {
      /** @description Application created successfully. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-dockerfile-application": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Application object that needs to be created. */
    requestBody: {
      content: {
        "application/json": {
          /** @description The project UUID. */
          project_uuid: string;
          /** @description The server UUID. */
          server_uuid: string;
          /** @description The environment name. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description The environment UUID. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description The Dockerfile content. */
          dockerfile: string;
          /**
           * @description The build pack type.
           * @enum {string}
           */
          build_pack?: "nixpacks" | "static" | "dockerfile" | "dockercompose";
          /** @description The ports to expose. */
          ports_exposes?: string;
          /** @description The destination UUID. */
          destination_uuid?: string;
          /** @description The application name. */
          name?: string;
          /** @description The application description. */
          description?: string;
          /** @description The application domains. */
          domains?: string;
          /** @description The docker registry image name. */
          docker_registry_image_name?: string;
          /** @description The docker registry image tag. */
          docker_registry_image_tag?: string;
          /** @description The ports mappings. */
          ports_mappings?: string;
          /** @description The base directory for all commands. */
          base_directory?: string;
          /** @description Health check enabled. */
          health_check_enabled?: boolean;
          /** @description Health check path. */
          health_check_path?: string;
          /** @description Health check port. */
          health_check_port?: string | null;
          /** @description Health check host. */
          health_check_host?: string | null;
          /** @description Health check method. */
          health_check_method?: string;
          /** @description Health check return code. */
          health_check_return_code?: number;
          /** @description Health check scheme. */
          health_check_scheme?: string;
          /** @description Health check response text. */
          health_check_response_text?: string | null;
          /** @description Health check interval in seconds. */
          health_check_interval?: number;
          /** @description Health check timeout in seconds. */
          health_check_timeout?: number;
          /** @description Health check retries count. */
          health_check_retries?: number;
          /** @description Health check start period in seconds. */
          health_check_start_period?: number;
          /** @description Memory limit. */
          limits_memory?: string;
          /** @description Memory swap limit. */
          limits_memory_swap?: string;
          /** @description Memory swappiness. */
          limits_memory_swappiness?: number;
          /** @description Memory reservation. */
          limits_memory_reservation?: string;
          /** @description CPU limit. */
          limits_cpus?: string;
          /** @description CPU set. */
          limits_cpuset?: string | null;
          /** @description CPU shares. */
          limits_cpu_shares?: number;
          /** @description Custom labels. */
          custom_labels?: string;
          /** @description Custom docker run options. */
          custom_docker_run_options?: string;
          /** @description Post deployment command. */
          post_deployment_command?: string;
          /** @description Post deployment command container. */
          post_deployment_command_container?: string;
          /** @description Pre deployment command. */
          pre_deployment_command?: string;
          /** @description Pre deployment command container. */
          pre_deployment_command_container?: string;
          /** @description Manual webhook secret for Github. */
          manual_webhook_secret_github?: string;
          /** @description Manual webhook secret for Gitlab. */
          manual_webhook_secret_gitlab?: string;
          /** @description Manual webhook secret for Bitbucket. */
          manual_webhook_secret_bitbucket?: string;
          /** @description Manual webhook secret for Gitea. */
          manual_webhook_secret_gitea?: string;
          /**
           * @description How to set redirect with Traefik / Caddy. www<->non-www.
           * @enum {string|null}
           */
          redirect?: "www" | "non-www" | "both" | null;
          /** @description The flag to indicate if the application should be deployed instantly. */
          instant_deploy?: boolean;
          /** @description Use build server. */
          use_build_server?: boolean | null;
        };
      };
    };
    responses: {
      /** @description Application created successfully. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-dockerimage-application": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Application object that needs to be created. */
    requestBody: {
      content: {
        "application/json": {
          /** @description The project UUID. */
          project_uuid: string;
          /** @description The server UUID. */
          server_uuid: string;
          /** @description The environment name. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description The environment UUID. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description The docker registry image name. */
          docker_registry_image_name: string;
          /** @description The docker registry image tag. */
          docker_registry_image_tag?: string;
          /** @description The ports to expose. */
          ports_exposes: string;
          /** @description The destination UUID. */
          destination_uuid?: string;
          /** @description The application name. */
          name?: string;
          /** @description The application description. */
          description?: string;
          /** @description The application domains. */
          domains?: string;
          /** @description The ports mappings. */
          ports_mappings?: string;
          /** @description Health check enabled. */
          health_check_enabled?: boolean;
          /** @description Health check path. */
          health_check_path?: string;
          /** @description Health check port. */
          health_check_port?: string | null;
          /** @description Health check host. */
          health_check_host?: string | null;
          /** @description Health check method. */
          health_check_method?: string;
          /** @description Health check return code. */
          health_check_return_code?: number;
          /** @description Health check scheme. */
          health_check_scheme?: string;
          /** @description Health check response text. */
          health_check_response_text?: string | null;
          /** @description Health check interval in seconds. */
          health_check_interval?: number;
          /** @description Health check timeout in seconds. */
          health_check_timeout?: number;
          /** @description Health check retries count. */
          health_check_retries?: number;
          /** @description Health check start period in seconds. */
          health_check_start_period?: number;
          /** @description Memory limit. */
          limits_memory?: string;
          /** @description Memory swap limit. */
          limits_memory_swap?: string;
          /** @description Memory swappiness. */
          limits_memory_swappiness?: number;
          /** @description Memory reservation. */
          limits_memory_reservation?: string;
          /** @description CPU limit. */
          limits_cpus?: string;
          /** @description CPU set. */
          limits_cpuset?: string | null;
          /** @description CPU shares. */
          limits_cpu_shares?: number;
          /** @description Custom labels. */
          custom_labels?: string;
          /** @description Custom docker run options. */
          custom_docker_run_options?: string;
          /** @description Post deployment command. */
          post_deployment_command?: string;
          /** @description Post deployment command container. */
          post_deployment_command_container?: string;
          /** @description Pre deployment command. */
          pre_deployment_command?: string;
          /** @description Pre deployment command container. */
          pre_deployment_command_container?: string;
          /** @description Manual webhook secret for Github. */
          manual_webhook_secret_github?: string;
          /** @description Manual webhook secret for Gitlab. */
          manual_webhook_secret_gitlab?: string;
          /** @description Manual webhook secret for Bitbucket. */
          manual_webhook_secret_bitbucket?: string;
          /** @description Manual webhook secret for Gitea. */
          manual_webhook_secret_gitea?: string;
          /**
           * @description How to set redirect with Traefik / Caddy. www<->non-www.
           * @enum {string|null}
           */
          redirect?: "www" | "non-www" | "both" | null;
          /** @description The flag to indicate if the application should be deployed instantly. */
          instant_deploy?: boolean;
          /** @description Use build server. */
          use_build_server?: boolean | null;
        };
      };
    };
    responses: {
      /** @description Application created successfully. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-dockercompose-application": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Application object that needs to be created. */
    requestBody: {
      content: {
        "application/json": {
          /** @description The project UUID. */
          project_uuid: string;
          /** @description The server UUID. */
          server_uuid: string;
          /** @description The environment name. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description The environment UUID. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description The Docker Compose raw content. */
          docker_compose_raw: string;
          /** @description The destination UUID if the server has more than one destinations. */
          destination_uuid?: string;
          /** @description The application name. */
          name?: string;
          /** @description The application description. */
          description?: string;
          /** @description The flag to indicate if the application should be deployed instantly. */
          instant_deploy?: boolean;
          /** @description Use build server. */
          use_build_server?: boolean | null;
        };
      };
    };
    responses: {
      /** @description Application created successfully. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "get-application-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the application. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get application by UUID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Application"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "delete-application-by-uuid": {
    parameters: {
      query?: {
        /** @description Delete configurations. */
        delete_configurations?: boolean;
        /** @description Delete volumes. */
        delete_volumes?: boolean;
        /** @description Run docker cleanup. */
        docker_cleanup?: boolean;
        /** @description Delete connected networks. */
        delete_connected_networks?: boolean;
      };
      header?: never;
      path: {
        /** @description UUID of the application. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Application deleted. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Application deleted. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "update-application-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Application updated. */
    requestBody: {
      content: {
        "application/json": {
          /** @description The project UUID. */
          project_uuid?: string;
          /** @description The server UUID. */
          server_uuid?: string;
          /** @description The environment name. */
          environment_name?: string;
          /** @description The Github App UUID. */
          github_app_uuid?: string;
          /** @description The git repository URL. */
          git_repository?: string;
          /** @description The git branch. */
          git_branch?: string;
          /** @description The ports to expose. */
          ports_exposes?: string;
          /** @description The destination UUID. */
          destination_uuid?: string;
          /**
           * @description The build pack type.
           * @enum {string}
           */
          build_pack?: "nixpacks" | "static" | "dockerfile" | "dockercompose";
          /** @description The application name. */
          name?: string;
          /** @description The application description. */
          description?: string;
          /** @description The application domains. */
          domains?: string;
          /** @description The git commit SHA. */
          git_commit_sha?: string;
          /** @description The docker registry image name. */
          docker_registry_image_name?: string;
          /** @description The docker registry image tag. */
          docker_registry_image_tag?: string;
          /** @description The flag to indicate if the application is static. */
          is_static?: boolean;
          /** @description The install command. */
          install_command?: string;
          /** @description The build command. */
          build_command?: string;
          /** @description The start command. */
          start_command?: string;
          /** @description The ports mappings. */
          ports_mappings?: string;
          /** @description The base directory for all commands. */
          base_directory?: string;
          /** @description The publish directory. */
          publish_directory?: string;
          /** @description Health check enabled. */
          health_check_enabled?: boolean;
          /** @description Health check path. */
          health_check_path?: string;
          /** @description Health check port. */
          health_check_port?: string | null;
          /** @description Health check host. */
          health_check_host?: string | null;
          /** @description Health check method. */
          health_check_method?: string;
          /** @description Health check return code. */
          health_check_return_code?: number;
          /** @description Health check scheme. */
          health_check_scheme?: string;
          /** @description Health check response text. */
          health_check_response_text?: string | null;
          /** @description Health check interval in seconds. */
          health_check_interval?: number;
          /** @description Health check timeout in seconds. */
          health_check_timeout?: number;
          /** @description Health check retries count. */
          health_check_retries?: number;
          /** @description Health check start period in seconds. */
          health_check_start_period?: number;
          /** @description Memory limit. */
          limits_memory?: string;
          /** @description Memory swap limit. */
          limits_memory_swap?: string;
          /** @description Memory swappiness. */
          limits_memory_swappiness?: number;
          /** @description Memory reservation. */
          limits_memory_reservation?: string;
          /** @description CPU limit. */
          limits_cpus?: string;
          /** @description CPU set. */
          limits_cpuset?: string | null;
          /** @description CPU shares. */
          limits_cpu_shares?: number;
          /** @description Custom labels. */
          custom_labels?: string;
          /** @description Custom docker run options. */
          custom_docker_run_options?: string;
          /** @description Post deployment command. */
          post_deployment_command?: string;
          /** @description Post deployment command container. */
          post_deployment_command_container?: string;
          /** @description Pre deployment command. */
          pre_deployment_command?: string;
          /** @description Pre deployment command container. */
          pre_deployment_command_container?: string;
          /** @description Manual webhook secret for Github. */
          manual_webhook_secret_github?: string;
          /** @description Manual webhook secret for Gitlab. */
          manual_webhook_secret_gitlab?: string;
          /** @description Manual webhook secret for Bitbucket. */
          manual_webhook_secret_bitbucket?: string;
          /** @description Manual webhook secret for Gitea. */
          manual_webhook_secret_gitea?: string;
          /**
           * @description How to set redirect with Traefik / Caddy. www<->non-www.
           * @enum {string|null}
           */
          redirect?: "www" | "non-www" | "both" | null;
          /** @description The flag to indicate if the application should be deployed instantly. */
          instant_deploy?: boolean;
          /** @description The Dockerfile content. */
          dockerfile?: string;
          /** @description The Docker Compose location. */
          docker_compose_location?: string;
          /** @description The Docker Compose raw content. */
          docker_compose_raw?: string;
          /** @description The Docker Compose custom start command. */
          docker_compose_custom_start_command?: string;
          /** @description The Docker Compose custom build command. */
          docker_compose_custom_build_command?: string;
          /** @description The Docker Compose domains. */
          docker_compose_domains?: unknown[];
          /** @description The watch paths. */
          watch_paths?: string;
          /** @description Use build server. */
          use_build_server?: boolean | null;
        };
      };
    };
    responses: {
      /** @description Application updated. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "list-envs-by-application-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the application. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description All environment variables by application UUID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EnvironmentVariable"][];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "create-env-by-application-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the application. */
        uuid: string;
      };
      cookie?: never;
    };
    /** @description Env created. */
    requestBody: {
      content: {
        "application/json": {
          /** @description The key of the environment variable. */
          key?: string;
          /** @description The value of the environment variable. */
          value?: string;
          /** @description The flag to indicate if the environment variable is used in preview deployments. */
          is_preview?: boolean;
          /** @description The flag to indicate if the environment variable is used in build time. */
          is_build_time?: boolean;
          /** @description The flag to indicate if the environment variable is a literal, nothing espaced. */
          is_literal?: boolean;
          /** @description The flag to indicate if the environment variable is multiline. */
          is_multiline?: boolean;
          /** @description The flag to indicate if the environment variable's value is shown on the UI. */
          is_shown_once?: boolean;
        };
      };
    };
    responses: {
      /** @description Environment variable created. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example nc0k04gk8g0cgsk440g0koko */
            uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "update-env-by-application-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the application. */
        uuid: string;
      };
      cookie?: never;
    };
    /** @description Env updated. */
    requestBody: {
      content: {
        "application/json": {
          /** @description The key of the environment variable. */
          key: string;
          /** @description The value of the environment variable. */
          value: string;
          /** @description The flag to indicate if the environment variable is used in preview deployments. */
          is_preview?: boolean;
          /** @description The flag to indicate if the environment variable is used in build time. */
          is_build_time?: boolean;
          /** @description The flag to indicate if the environment variable is a literal, nothing espaced. */
          is_literal?: boolean;
          /** @description The flag to indicate if the environment variable is multiline. */
          is_multiline?: boolean;
          /** @description The flag to indicate if the environment variable's value is shown on the UI. */
          is_shown_once?: boolean;
        };
      };
    };
    responses: {
      /** @description Environment variable updated. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Environment variable updated. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "update-envs-by-application-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the application. */
        uuid: string;
      };
      cookie?: never;
    };
    /** @description Bulk envs updated. */
    requestBody: {
      content: {
        "application/json": {
          data: {
            /** @description The key of the environment variable. */
            key?: string;
            /** @description The value of the environment variable. */
            value?: string;
            /** @description The flag to indicate if the environment variable is used in preview deployments. */
            is_preview?: boolean;
            /** @description The flag to indicate if the environment variable is used in build time. */
            is_build_time?: boolean;
            /** @description The flag to indicate if the environment variable is a literal, nothing espaced. */
            is_literal?: boolean;
            /** @description The flag to indicate if the environment variable is multiline. */
            is_multiline?: boolean;
            /** @description The flag to indicate if the environment variable's value is shown on the UI. */
            is_shown_once?: boolean;
          }[];
        };
      };
    };
    responses: {
      /** @description Environment variables updated. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Environment variables updated. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "delete-env-by-application-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the application. */
        uuid: string;
        /** @description UUID of the environment variable. */
        env_uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Environment variable deleted. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Environment variable deleted. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "start-application-by-uuid": {
    parameters: {
      query?: {
        /** @description Force rebuild. */
        force?: boolean;
        /** @description Instant deploy (skip queuing). */
        instant_deploy?: boolean;
      };
      header?: never;
      path: {
        /** @description UUID of the application. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Start application. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description Message.
             * @example Deployment request queued.
             */
            message?: string;
            /**
             * @description UUID of the deployment.
             * @example doogksw
             */
            deployment_uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "stop-application-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the application. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Stop application. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Application stopping request queued. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "restart-application-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the application. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Restart application. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Restart request queued. */
            message?: string;
            /**
             * @description UUID of the deployment.
             * @example doogksw
             */
            deployment_uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "execute-command-application": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the application. */
        uuid: string;
      };
      cookie?: never;
    };
    /** @description Command to execute. */
    requestBody: {
      content: {
        "application/json": {
          /** @description Command to execute. */
          command?: string;
        };
      };
    };
    responses: {
      /** @description Execute a command on the application's current container. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Command executed. */
            message?: string;
            response?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "list-databases": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get all databases */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "get-database-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the database. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get all databases */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "delete-database-by-uuid": {
    parameters: {
      query?: {
        /** @description Delete configurations. */
        delete_configurations?: boolean;
        /** @description Delete volumes. */
        delete_volumes?: boolean;
        /** @description Run docker cleanup. */
        docker_cleanup?: boolean;
        /** @description Delete connected networks. */
        delete_connected_networks?: boolean;
      };
      header?: never;
      path: {
        /** @description UUID of the database. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Database deleted. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Database deleted. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "update-database-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the database. */
        uuid: string;
      };
      cookie?: never;
    };
    /** @description Database data */
    requestBody: {
      content: {
        "application/json": {
          /** @description Name of the database */
          name?: string;
          /** @description Description of the database */
          description?: string;
          /** @description Docker Image of the database */
          image?: string;
          /** @description Is the database public? */
          is_public?: boolean;
          /** @description Public port of the database */
          public_port?: number;
          /** @description Memory limit of the database */
          limits_memory?: string;
          /** @description Memory swap limit of the database */
          limits_memory_swap?: string;
          /** @description Memory swappiness of the database */
          limits_memory_swappiness?: number;
          /** @description Memory reservation of the database */
          limits_memory_reservation?: string;
          /** @description CPU limit of the database */
          limits_cpus?: string;
          /** @description CPU set of the database */
          limits_cpuset?: string;
          /** @description CPU shares of the database */
          limits_cpu_shares?: number;
          /** @description PostgreSQL user */
          postgres_user?: string;
          /** @description PostgreSQL password */
          postgres_password?: string;
          /** @description PostgreSQL database */
          postgres_db?: string;
          /** @description PostgreSQL initdb args */
          postgres_initdb_args?: string;
          /** @description PostgreSQL host auth method */
          postgres_host_auth_method?: string;
          /** @description PostgreSQL conf */
          postgres_conf?: string;
          /** @description Clickhouse admin user */
          clickhouse_admin_user?: string;
          /** @description Clickhouse admin password */
          clickhouse_admin_password?: string;
          /** @description DragonFly password */
          dragonfly_password?: string;
          /** @description Redis password */
          redis_password?: string;
          /** @description Redis conf */
          redis_conf?: string;
          /** @description KeyDB password */
          keydb_password?: string;
          /** @description KeyDB conf */
          keydb_conf?: string;
          /** @description MariaDB conf */
          mariadb_conf?: string;
          /** @description MariaDB root password */
          mariadb_root_password?: string;
          /** @description MariaDB user */
          mariadb_user?: string;
          /** @description MariaDB password */
          mariadb_password?: string;
          /** @description MariaDB database */
          mariadb_database?: string;
          /** @description Mongo conf */
          mongo_conf?: string;
          /** @description Mongo initdb root username */
          mongo_initdb_root_username?: string;
          /** @description Mongo initdb root password */
          mongo_initdb_root_password?: string;
          /** @description Mongo initdb init database */
          mongo_initdb_database?: string;
          /** @description MySQL root password */
          mysql_root_password?: string;
          /** @description MySQL password */
          mysql_password?: string;
          /** @description MySQL user */
          mysql_user?: string;
          /** @description MySQL database */
          mysql_database?: string;
          /** @description MySQL conf */
          mysql_conf?: string;
        };
      };
    };
    responses: {
      /** @description Database updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "create-database-postgresql": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Database data */
    requestBody: {
      content: {
        "application/json": {
          /** @description UUID of the server */
          server_uuid: string;
          /** @description UUID of the project */
          project_uuid: string;
          /** @description Name of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description UUID of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description PostgreSQL user */
          postgres_user?: string;
          /** @description PostgreSQL password */
          postgres_password?: string;
          /** @description PostgreSQL database */
          postgres_db?: string;
          /** @description PostgreSQL initdb args */
          postgres_initdb_args?: string;
          /** @description PostgreSQL host auth method */
          postgres_host_auth_method?: string;
          /** @description PostgreSQL conf */
          postgres_conf?: string;
          /** @description UUID of the destination if the server has multiple destinations */
          destination_uuid?: string;
          /** @description Name of the database */
          name?: string;
          /** @description Description of the database */
          description?: string;
          /** @description Docker Image of the database */
          image?: string;
          /** @description Is the database public? */
          is_public?: boolean;
          /** @description Public port of the database */
          public_port?: number;
          /** @description Memory limit of the database */
          limits_memory?: string;
          /** @description Memory swap limit of the database */
          limits_memory_swap?: string;
          /** @description Memory swappiness of the database */
          limits_memory_swappiness?: number;
          /** @description Memory reservation of the database */
          limits_memory_reservation?: string;
          /** @description CPU limit of the database */
          limits_cpus?: string;
          /** @description CPU set of the database */
          limits_cpuset?: string;
          /** @description CPU shares of the database */
          limits_cpu_shares?: number;
          /** @description Instant deploy the database */
          instant_deploy?: boolean;
        };
      };
    };
    responses: {
      /** @description Database updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-database-clickhouse": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Database data */
    requestBody: {
      content: {
        "application/json": {
          /** @description UUID of the server */
          server_uuid: string;
          /** @description UUID of the project */
          project_uuid: string;
          /** @description Name of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description UUID of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description UUID of the destination if the server has multiple destinations */
          destination_uuid?: string;
          /** @description Clickhouse admin user */
          clickhouse_admin_user?: string;
          /** @description Clickhouse admin password */
          clickhouse_admin_password?: string;
          /** @description Name of the database */
          name?: string;
          /** @description Description of the database */
          description?: string;
          /** @description Docker Image of the database */
          image?: string;
          /** @description Is the database public? */
          is_public?: boolean;
          /** @description Public port of the database */
          public_port?: number;
          /** @description Memory limit of the database */
          limits_memory?: string;
          /** @description Memory swap limit of the database */
          limits_memory_swap?: string;
          /** @description Memory swappiness of the database */
          limits_memory_swappiness?: number;
          /** @description Memory reservation of the database */
          limits_memory_reservation?: string;
          /** @description CPU limit of the database */
          limits_cpus?: string;
          /** @description CPU set of the database */
          limits_cpuset?: string;
          /** @description CPU shares of the database */
          limits_cpu_shares?: number;
          /** @description Instant deploy the database */
          instant_deploy?: boolean;
        };
      };
    };
    responses: {
      /** @description Database updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-database-dragonfly": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Database data */
    requestBody: {
      content: {
        "application/json": {
          /** @description UUID of the server */
          server_uuid: string;
          /** @description UUID of the project */
          project_uuid: string;
          /** @description Name of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description UUID of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description UUID of the destination if the server has multiple destinations */
          destination_uuid?: string;
          /** @description DragonFly password */
          dragonfly_password?: string;
          /** @description Name of the database */
          name?: string;
          /** @description Description of the database */
          description?: string;
          /** @description Docker Image of the database */
          image?: string;
          /** @description Is the database public? */
          is_public?: boolean;
          /** @description Public port of the database */
          public_port?: number;
          /** @description Memory limit of the database */
          limits_memory?: string;
          /** @description Memory swap limit of the database */
          limits_memory_swap?: string;
          /** @description Memory swappiness of the database */
          limits_memory_swappiness?: number;
          /** @description Memory reservation of the database */
          limits_memory_reservation?: string;
          /** @description CPU limit of the database */
          limits_cpus?: string;
          /** @description CPU set of the database */
          limits_cpuset?: string;
          /** @description CPU shares of the database */
          limits_cpu_shares?: number;
          /** @description Instant deploy the database */
          instant_deploy?: boolean;
        };
      };
    };
    responses: {
      /** @description Database updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-database-redis": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Database data */
    requestBody: {
      content: {
        "application/json": {
          /** @description UUID of the server */
          server_uuid: string;
          /** @description UUID of the project */
          project_uuid: string;
          /** @description Name of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description UUID of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description UUID of the destination if the server has multiple destinations */
          destination_uuid?: string;
          /** @description Redis password */
          redis_password?: string;
          /** @description Redis conf */
          redis_conf?: string;
          /** @description Name of the database */
          name?: string;
          /** @description Description of the database */
          description?: string;
          /** @description Docker Image of the database */
          image?: string;
          /** @description Is the database public? */
          is_public?: boolean;
          /** @description Public port of the database */
          public_port?: number;
          /** @description Memory limit of the database */
          limits_memory?: string;
          /** @description Memory swap limit of the database */
          limits_memory_swap?: string;
          /** @description Memory swappiness of the database */
          limits_memory_swappiness?: number;
          /** @description Memory reservation of the database */
          limits_memory_reservation?: string;
          /** @description CPU limit of the database */
          limits_cpus?: string;
          /** @description CPU set of the database */
          limits_cpuset?: string;
          /** @description CPU shares of the database */
          limits_cpu_shares?: number;
          /** @description Instant deploy the database */
          instant_deploy?: boolean;
        };
      };
    };
    responses: {
      /** @description Database updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-database-keydb": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Database data */
    requestBody: {
      content: {
        "application/json": {
          /** @description UUID of the server */
          server_uuid: string;
          /** @description UUID of the project */
          project_uuid: string;
          /** @description Name of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description UUID of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description UUID of the destination if the server has multiple destinations */
          destination_uuid?: string;
          /** @description KeyDB password */
          keydb_password?: string;
          /** @description KeyDB conf */
          keydb_conf?: string;
          /** @description Name of the database */
          name?: string;
          /** @description Description of the database */
          description?: string;
          /** @description Docker Image of the database */
          image?: string;
          /** @description Is the database public? */
          is_public?: boolean;
          /** @description Public port of the database */
          public_port?: number;
          /** @description Memory limit of the database */
          limits_memory?: string;
          /** @description Memory swap limit of the database */
          limits_memory_swap?: string;
          /** @description Memory swappiness of the database */
          limits_memory_swappiness?: number;
          /** @description Memory reservation of the database */
          limits_memory_reservation?: string;
          /** @description CPU limit of the database */
          limits_cpus?: string;
          /** @description CPU set of the database */
          limits_cpuset?: string;
          /** @description CPU shares of the database */
          limits_cpu_shares?: number;
          /** @description Instant deploy the database */
          instant_deploy?: boolean;
        };
      };
    };
    responses: {
      /** @description Database updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-database-mariadb": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Database data */
    requestBody: {
      content: {
        "application/json": {
          /** @description UUID of the server */
          server_uuid: string;
          /** @description UUID of the project */
          project_uuid: string;
          /** @description Name of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description UUID of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description UUID of the destination if the server has multiple destinations */
          destination_uuid?: string;
          /** @description MariaDB conf */
          mariadb_conf?: string;
          /** @description MariaDB root password */
          mariadb_root_password?: string;
          /** @description MariaDB user */
          mariadb_user?: string;
          /** @description MariaDB password */
          mariadb_password?: string;
          /** @description MariaDB database */
          mariadb_database?: string;
          /** @description Name of the database */
          name?: string;
          /** @description Description of the database */
          description?: string;
          /** @description Docker Image of the database */
          image?: string;
          /** @description Is the database public? */
          is_public?: boolean;
          /** @description Public port of the database */
          public_port?: number;
          /** @description Memory limit of the database */
          limits_memory?: string;
          /** @description Memory swap limit of the database */
          limits_memory_swap?: string;
          /** @description Memory swappiness of the database */
          limits_memory_swappiness?: number;
          /** @description Memory reservation of the database */
          limits_memory_reservation?: string;
          /** @description CPU limit of the database */
          limits_cpus?: string;
          /** @description CPU set of the database */
          limits_cpuset?: string;
          /** @description CPU shares of the database */
          limits_cpu_shares?: number;
          /** @description Instant deploy the database */
          instant_deploy?: boolean;
        };
      };
    };
    responses: {
      /** @description Database updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-database-mysql": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Database data */
    requestBody: {
      content: {
        "application/json": {
          /** @description UUID of the server */
          server_uuid: string;
          /** @description UUID of the project */
          project_uuid: string;
          /** @description Name of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description UUID of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description UUID of the destination if the server has multiple destinations */
          destination_uuid?: string;
          /** @description MySQL root password */
          mysql_root_password?: string;
          /** @description MySQL password */
          mysql_password?: string;
          /** @description MySQL user */
          mysql_user?: string;
          /** @description MySQL database */
          mysql_database?: string;
          /** @description MySQL conf */
          mysql_conf?: string;
          /** @description Name of the database */
          name?: string;
          /** @description Description of the database */
          description?: string;
          /** @description Docker Image of the database */
          image?: string;
          /** @description Is the database public? */
          is_public?: boolean;
          /** @description Public port of the database */
          public_port?: number;
          /** @description Memory limit of the database */
          limits_memory?: string;
          /** @description Memory swap limit of the database */
          limits_memory_swap?: string;
          /** @description Memory swappiness of the database */
          limits_memory_swappiness?: number;
          /** @description Memory reservation of the database */
          limits_memory_reservation?: string;
          /** @description CPU limit of the database */
          limits_cpus?: string;
          /** @description CPU set of the database */
          limits_cpuset?: string;
          /** @description CPU shares of the database */
          limits_cpu_shares?: number;
          /** @description Instant deploy the database */
          instant_deploy?: boolean;
        };
      };
    };
    responses: {
      /** @description Database updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-database-mongodb": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Database data */
    requestBody: {
      content: {
        "application/json": {
          /** @description UUID of the server */
          server_uuid: string;
          /** @description UUID of the project */
          project_uuid: string;
          /** @description Name of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description UUID of the environment. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description UUID of the destination if the server has multiple destinations */
          destination_uuid?: string;
          /** @description MongoDB conf */
          mongo_conf?: string;
          /** @description MongoDB initdb root username */
          mongo_initdb_root_username?: string;
          /** @description Name of the database */
          name?: string;
          /** @description Description of the database */
          description?: string;
          /** @description Docker Image of the database */
          image?: string;
          /** @description Is the database public? */
          is_public?: boolean;
          /** @description Public port of the database */
          public_port?: number;
          /** @description Memory limit of the database */
          limits_memory?: string;
          /** @description Memory swap limit of the database */
          limits_memory_swap?: string;
          /** @description Memory swappiness of the database */
          limits_memory_swappiness?: number;
          /** @description Memory reservation of the database */
          limits_memory_reservation?: string;
          /** @description CPU limit of the database */
          limits_cpus?: string;
          /** @description CPU set of the database */
          limits_cpuset?: string;
          /** @description CPU shares of the database */
          limits_cpu_shares?: number;
          /** @description Instant deploy the database */
          instant_deploy?: boolean;
        };
      };
    };
    responses: {
      /** @description Database updated */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "start-database-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the database. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Start database. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Database starting request queued. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "stop-database-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the database. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Stop database. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Database stopping request queued. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "restart-database-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the database. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Restart database. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Database restaring request queued. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "list-deployments": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get all currently running deployments. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ApplicationDeploymentQueue"][];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "get-deployment-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Deployment UUID */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get deployment by UUID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["ApplicationDeploymentQueue"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "deploy-by-tag-or-uuid": {
    parameters: {
      query?: {
        /** @description Tag name(s). Comma separated list is also accepted. */
        tag?: string;
        /** @description Resource UUID(s). Comma separated list is also accepted. */
        uuid?: string;
        /** @description Force rebuild (without cache) */
        force?: boolean;
      };
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get deployment(s) UUID's */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            deployments?: {
              message?: string;
              resource_uuid?: string;
              deployment_uuid?: string;
            }[];
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  version: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Returns the version of the application */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "enable-api": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Enable API. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example API enabled. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      /** @description You are not allowed to enable the API. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example You are not allowed to enable the API. */
            message?: string;
          };
        };
      };
    };
  };
  "disable-api": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Disable API. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example API disabled. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      /** @description You are not allowed to disable the API. */
      403: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example You are not allowed to disable the API. */
            message?: string;
          };
        };
      };
    };
  };
  healthcheck: {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Healthcheck endpoint. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "list-projects": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get all projects. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Project"][];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-project": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Project created. */
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the project. */
          name?: string;
          /** @description The description of the project. */
          description?: string;
        };
      };
    };
    responses: {
      /** @description Project created. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description The UUID of the project.
             * @example og888os
             */
            uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "get-project-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Project UUID */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Project details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Project"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      /** @description Project not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "delete-project-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the application. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Project deleted. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Project deleted. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "update-project-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Project updated. */
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the project. */
          name?: string;
          /** @description The description of the project. */
          description?: string;
        };
      };
    };
    responses: {
      /** @description Project updated. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example og888os */
            uuid?: string;
            /** @example Project Name */
            name?: string;
            /** @example Project Description */
            description?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "get-environment-by-name-or-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Project UUID */
        uuid: string;
        /** @description Environment name or UUID */
        environment_name_or_uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Environment details */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Environment"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "list-resources": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get all resources */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": string;
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "list-private-keys": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get all private keys. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PrivateKey"][];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-private-key": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          description?: string;
          private_key: string;
        };
      };
    };
    responses: {
      /** @description The created private key's UUID. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "update-private-key": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          name?: string;
          description?: string;
          private_key: string;
        };
      };
    };
    responses: {
      /** @description The updated private key's UUID. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "get-private-key-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Private Key UUID */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get all private keys. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["PrivateKey"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      /** @description Private Key not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "delete-private-key-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Private Key UUID */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Private Key deleted. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Private Key deleted. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      /** @description Private Key not found. */
      404: {
        headers: {
          [name: string]: unknown;
        };
        content?: never;
      };
    };
  };
  "list-servers": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get all servers. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Server"][];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-server": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    /** @description Server created. */
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The name of the server.
           * @example My Server
           */
          name?: string;
          /**
           * @description The description of the server.
           * @example My Server Description
           */
          description?: string;
          /**
           * @description The IP of the server.
           * @example 127.0.0.1
           */
          ip?: string;
          /**
           * @description The port of the server.
           * @example 22
           */
          port?: number;
          /**
           * @description The user of the server.
           * @example root
           */
          user?: string;
          /**
           * @description The UUID of the private key.
           * @example og888os
           */
          private_key_uuid?: string;
          /**
           * @description Is build server.
           * @example false
           */
          is_build_server?: boolean;
          /**
           * @description Instant validate.
           * @example false
           */
          instant_validate?: boolean;
          /**
           * @description The proxy type.
           * @example traefik
           * @enum {string}
           */
          proxy_type?: "traefik" | "caddy" | "none";
        };
      };
    };
    responses: {
      /** @description Server created. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /**
             * @description The UUID of the server.
             * @example og888os
             */
            uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "get-server-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Server's UUID */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get server by UUID */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Server"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "delete-server-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the server. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Server deleted. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Server deleted. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "update-server-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Server UUID */
        uuid: string;
      };
      cookie?: never;
    };
    /** @description Server updated. */
    requestBody: {
      content: {
        "application/json": {
          /** @description The name of the server. */
          name?: string;
          /** @description The description of the server. */
          description?: string;
          /** @description The IP of the server. */
          ip?: string;
          /** @description The port of the server. */
          port?: number;
          /** @description The user of the server. */
          user?: string;
          /** @description The UUID of the private key. */
          private_key_uuid?: string;
          /** @description Is build server. */
          is_build_server?: boolean;
          /** @description Instant validate. */
          instant_validate?: boolean;
          /**
           * @description The proxy type.
           * @enum {string}
           */
          proxy_type?: "traefik" | "caddy" | "none";
        };
      };
    };
    responses: {
      /** @description Server updated. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Server"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "get-resources-by-server-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Server's UUID */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get resources by server */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            id?: number;
            uuid?: string;
            name?: string;
            type?: string;
            created_at?: string;
            updated_at?: string;
            status?: string;
          }[];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "get-domains-by-server-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Server's UUID */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get domains by server */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            ip?: string;
            domains?: string[];
          }[];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "validate-server-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Server UUID */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Server validation started. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Validation started. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "list-services": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get all services */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Service"][];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "create-service": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody: {
      content: {
        "application/json": {
          /**
           * @description The one-click service type
           * @enum {string}
           */
          type:
            | "activepieces"
            | "appsmith"
            | "appwrite"
            | "authentik"
            | "babybuddy"
            | "budge"
            | "changedetection"
            | "chatwoot"
            | "classicpress-with-mariadb"
            | "classicpress-with-mysql"
            | "classicpress-without-database"
            | "cloudflared"
            | "code-server"
            | "dashboard"
            | "directus"
            | "directus-with-postgresql"
            | "docker-registry"
            | "docuseal"
            | "docuseal-with-postgres"
            | "dokuwiki"
            | "duplicati"
            | "emby"
            | "embystat"
            | "fider"
            | "filebrowser"
            | "firefly"
            | "formbricks"
            | "ghost"
            | "gitea"
            | "gitea-with-mariadb"
            | "gitea-with-mysql"
            | "gitea-with-postgresql"
            | "glance"
            | "glances"
            | "glitchtip"
            | "grafana"
            | "grafana-with-postgresql"
            | "grocy"
            | "heimdall"
            | "homepage"
            | "jellyfin"
            | "kuzzle"
            | "listmonk"
            | "logto"
            | "mediawiki"
            | "meilisearch"
            | "metabase"
            | "metube"
            | "minio"
            | "moodle"
            | "n8n"
            | "n8n-with-postgresql"
            | "next-image-transformation"
            | "nextcloud"
            | "nocodb"
            | "odoo"
            | "openblocks"
            | "pairdrop"
            | "penpot"
            | "phpmyadmin"
            | "pocketbase"
            | "posthog"
            | "reactive-resume"
            | "rocketchat"
            | "shlink"
            | "slash"
            | "snapdrop"
            | "statusnook"
            | "stirling-pdf"
            | "supabase"
            | "syncthing"
            | "tolgee"
            | "trigger"
            | "trigger-with-external-database"
            | "twenty"
            | "umami"
            | "unleash-with-postgresql"
            | "unleash-without-database"
            | "uptime-kuma"
            | "vaultwarden"
            | "vikunja"
            | "weblate"
            | "whoogle"
            | "wordpress-with-mariadb"
            | "wordpress-with-mysql"
            | "wordpress-without-database";
          /** @description Name of the service. */
          name?: string;
          /** @description Description of the service. */
          description?: string | null;
          /** @description Project UUID. */
          project_uuid: string;
          /** @description Environment name. You need to provide at least one of environment_name or environment_uuid. */
          environment_name: string;
          /** @description Environment UUID. You need to provide at least one of environment_name or environment_uuid. */
          environment_uuid: string;
          /** @description Server UUID. */
          server_uuid: string;
          /** @description Destination UUID. Required if server has multiple destinations. */
          destination_uuid?: string;
          /**
           * @description Start the service immediately after creation.
           * @default false
           */
          instant_deploy?: boolean;
        };
      };
    };
    responses: {
      /** @description Create a service. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @description Service UUID. */
            uuid?: string;
            /** @description Service domains. */
            domains?: string[];
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "get-service-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Service UUID */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Get a service by UUID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Service"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "delete-service-by-uuid": {
    parameters: {
      query?: {
        /** @description Delete configurations. */
        delete_configurations?: boolean;
        /** @description Delete volumes. */
        delete_volumes?: boolean;
        /** @description Run docker cleanup. */
        docker_cleanup?: boolean;
        /** @description Delete connected networks. */
        delete_connected_networks?: boolean;
      };
      header?: never;
      path: {
        /** @description Service UUID */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Delete a service by UUID */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Service deletion request queued. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "list-envs-by-service-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the service. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description All environment variables by service UUID. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["EnvironmentVariable"][];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "create-env-by-service-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the service. */
        uuid: string;
      };
      cookie?: never;
    };
    /** @description Env created. */
    requestBody: {
      content: {
        "application/json": {
          /** @description The key of the environment variable. */
          key?: string;
          /** @description The value of the environment variable. */
          value?: string;
          /** @description The flag to indicate if the environment variable is used in preview deployments. */
          is_preview?: boolean;
          /** @description The flag to indicate if the environment variable is used in build time. */
          is_build_time?: boolean;
          /** @description The flag to indicate if the environment variable is a literal, nothing espaced. */
          is_literal?: boolean;
          /** @description The flag to indicate if the environment variable is multiline. */
          is_multiline?: boolean;
          /** @description The flag to indicate if the environment variable's value is shown on the UI. */
          is_shown_once?: boolean;
        };
      };
    };
    responses: {
      /** @description Environment variable created. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example nc0k04gk8g0cgsk440g0koko */
            uuid?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "update-env-by-service-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the service. */
        uuid: string;
      };
      cookie?: never;
    };
    /** @description Env updated. */
    requestBody: {
      content: {
        "application/json": {
          /** @description The key of the environment variable. */
          key: string;
          /** @description The value of the environment variable. */
          value: string;
          /** @description The flag to indicate if the environment variable is used in preview deployments. */
          is_preview?: boolean;
          /** @description The flag to indicate if the environment variable is used in build time. */
          is_build_time?: boolean;
          /** @description The flag to indicate if the environment variable is a literal, nothing espaced. */
          is_literal?: boolean;
          /** @description The flag to indicate if the environment variable is multiline. */
          is_multiline?: boolean;
          /** @description The flag to indicate if the environment variable's value is shown on the UI. */
          is_shown_once?: boolean;
        };
      };
    };
    responses: {
      /** @description Environment variable updated. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Environment variable updated. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "update-envs-by-service-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the service. */
        uuid: string;
      };
      cookie?: never;
    };
    /** @description Bulk envs updated. */
    requestBody: {
      content: {
        "application/json": {
          data: {
            /** @description The key of the environment variable. */
            key?: string;
            /** @description The value of the environment variable. */
            value?: string;
            /** @description The flag to indicate if the environment variable is used in preview deployments. */
            is_preview?: boolean;
            /** @description The flag to indicate if the environment variable is used in build time. */
            is_build_time?: boolean;
            /** @description The flag to indicate if the environment variable is a literal, nothing espaced. */
            is_literal?: boolean;
            /** @description The flag to indicate if the environment variable is multiline. */
            is_multiline?: boolean;
            /** @description The flag to indicate if the environment variable's value is shown on the UI. */
            is_shown_once?: boolean;
          }[];
        };
      };
    };
    responses: {
      /** @description Environment variables updated. */
      201: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Environment variables updated. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "delete-env-by-service-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the service. */
        uuid: string;
        /** @description UUID of the environment variable. */
        env_uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Environment variable deleted. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Environment variable deleted. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "start-service-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the service. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Start service. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Service starting request queued. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "stop-service-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the service. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Stop service. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Service stopping request queued. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "restart-service-by-uuid": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description UUID of the service. */
        uuid: string;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Restart service. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": {
            /** @example Service restaring request queued. */
            message?: string;
          };
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "list-teams": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of teams. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Team"][];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "get-team-by-id": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Team ID */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of teams. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "get-members-by-team-id": {
    parameters: {
      query?: never;
      header?: never;
      path: {
        /** @description Team ID */
        id: number;
      };
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description List of members. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
      404: components["responses"]["404"];
    };
  };
  "get-current-team": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Current Team. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["Team"];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
  "get-current-team-members": {
    parameters: {
      query?: never;
      header?: never;
      path?: never;
      cookie?: never;
    };
    requestBody?: never;
    responses: {
      /** @description Currently authenticated team members. */
      200: {
        headers: {
          [name: string]: unknown;
        };
        content: {
          "application/json": components["schemas"]["User"][];
        };
      };
      400: components["responses"]["400"];
      401: components["responses"]["401"];
    };
  };
}
